//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Movies = newMoviesTable("public", "movies", "")

type moviesTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	Title           postgres.ColumnString
	EpisodeDuration postgres.ColumnInteger
	EpisodeCount    postgres.ColumnInteger
	AlterTitles     postgres.ColumnString
	Description     postgres.ColumnString
	ImageURL        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MoviesTable struct {
	moviesTable

	EXCLUDED moviesTable
}

// AS creates new MoviesTable with assigned alias
func (a MoviesTable) AS(alias string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MoviesTable with assigned schema name
func (a MoviesTable) FromSchema(schemaName string) *MoviesTable {
	return newMoviesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MoviesTable with assigned table prefix
func (a MoviesTable) WithPrefix(prefix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MoviesTable with assigned table suffix
func (a MoviesTable) WithSuffix(suffix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMoviesTable(schemaName, tableName, alias string) *MoviesTable {
	return &MoviesTable{
		moviesTable: newMoviesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newMoviesTableImpl("", "excluded", ""),
	}
}

func newMoviesTableImpl(schemaName, tableName, alias string) moviesTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		TitleColumn           = postgres.StringColumn("title")
		EpisodeDurationColumn = postgres.IntegerColumn("episode_duration")
		EpisodeCountColumn    = postgres.IntegerColumn("episode_count")
		AlterTitlesColumn     = postgres.StringColumn("alter_titles")
		DescriptionColumn     = postgres.StringColumn("description")
		ImageURLColumn        = postgres.StringColumn("image_url")
		allColumns            = postgres.ColumnList{IDColumn, TitleColumn, EpisodeDurationColumn, EpisodeCountColumn, AlterTitlesColumn, DescriptionColumn, ImageURLColumn}
		mutableColumns        = postgres.ColumnList{TitleColumn, EpisodeDurationColumn, EpisodeCountColumn, AlterTitlesColumn, DescriptionColumn, ImageURLColumn}
	)

	return moviesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Title:           TitleColumn,
		EpisodeDuration: EpisodeDurationColumn,
		EpisodeCount:    EpisodeCountColumn,
		AlterTitles:     AlterTitlesColumn,
		Description:     DescriptionColumn,
		ImageURL:        ImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
