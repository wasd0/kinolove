//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RolesPermissions = newRolesPermissionsTable("public", "roles_permissions", "")

type rolesPermissionsTable struct {
	postgres.Table

	// Columns
	RoleID       postgres.ColumnInteger
	PermissionID postgres.ColumnInteger
	Level        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RolesPermissionsTable struct {
	rolesPermissionsTable

	EXCLUDED rolesPermissionsTable
}

// AS creates new RolesPermissionsTable with assigned alias
func (a RolesPermissionsTable) AS(alias string) *RolesPermissionsTable {
	return newRolesPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RolesPermissionsTable with assigned schema name
func (a RolesPermissionsTable) FromSchema(schemaName string) *RolesPermissionsTable {
	return newRolesPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RolesPermissionsTable with assigned table prefix
func (a RolesPermissionsTable) WithPrefix(prefix string) *RolesPermissionsTable {
	return newRolesPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RolesPermissionsTable with assigned table suffix
func (a RolesPermissionsTable) WithSuffix(suffix string) *RolesPermissionsTable {
	return newRolesPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRolesPermissionsTable(schemaName, tableName, alias string) *RolesPermissionsTable {
	return &RolesPermissionsTable{
		rolesPermissionsTable: newRolesPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newRolesPermissionsTableImpl("", "excluded", ""),
	}
}

func newRolesPermissionsTableImpl(schemaName, tableName, alias string) rolesPermissionsTable {
	var (
		RoleIDColumn       = postgres.IntegerColumn("role_id")
		PermissionIDColumn = postgres.IntegerColumn("permission_id")
		LevelColumn        = postgres.IntegerColumn("level")
		allColumns         = postgres.ColumnList{RoleIDColumn, PermissionIDColumn, LevelColumn}
		mutableColumns     = postgres.ColumnList{LevelColumn}
	)

	return rolesPermissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RoleID:       RoleIDColumn,
		PermissionID: PermissionIDColumn,
		Level:        LevelColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
