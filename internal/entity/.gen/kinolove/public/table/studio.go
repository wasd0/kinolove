//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Studio = newStudioTable("public", "studio", "")

type studioTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudioTable struct {
	studioTable

	EXCLUDED studioTable
}

// AS creates new StudioTable with assigned alias
func (a StudioTable) AS(alias string) *StudioTable {
	return newStudioTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudioTable with assigned schema name
func (a StudioTable) FromSchema(schemaName string) *StudioTable {
	return newStudioTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudioTable with assigned table prefix
func (a StudioTable) WithPrefix(prefix string) *StudioTable {
	return newStudioTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudioTable with assigned table suffix
func (a StudioTable) WithSuffix(suffix string) *StudioTable {
	return newStudioTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudioTable(schemaName, tableName, alias string) *StudioTable {
	return &StudioTable{
		studioTable: newStudioTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newStudioTableImpl("", "excluded", ""),
	}
}

func newStudioTableImpl(schemaName, tableName, alias string) studioTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return studioTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
