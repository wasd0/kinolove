//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UsersPermissions = newUsersPermissionsTable("public", "users_permissions", "")

type usersPermissionsTable struct {
	postgres.Table

	// Columns
	UserID       postgres.ColumnString
	PermissionID postgres.ColumnInteger
	TargetLevel  postgres.ColumnInteger
	GlobalLevel  postgres.ColumnInteger
	Cause        postgres.ColumnString
	DateExpire   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersPermissionsTable struct {
	usersPermissionsTable

	EXCLUDED usersPermissionsTable
}

// AS creates new UsersPermissionsTable with assigned alias
func (a UsersPermissionsTable) AS(alias string) *UsersPermissionsTable {
	return newUsersPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersPermissionsTable with assigned schema name
func (a UsersPermissionsTable) FromSchema(schemaName string) *UsersPermissionsTable {
	return newUsersPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersPermissionsTable with assigned table prefix
func (a UsersPermissionsTable) WithPrefix(prefix string) *UsersPermissionsTable {
	return newUsersPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersPermissionsTable with assigned table suffix
func (a UsersPermissionsTable) WithSuffix(suffix string) *UsersPermissionsTable {
	return newUsersPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersPermissionsTable(schemaName, tableName, alias string) *UsersPermissionsTable {
	return &UsersPermissionsTable{
		usersPermissionsTable: newUsersPermissionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newUsersPermissionsTableImpl("", "excluded", ""),
	}
}

func newUsersPermissionsTableImpl(schemaName, tableName, alias string) usersPermissionsTable {
	var (
		UserIDColumn       = postgres.StringColumn("user_id")
		PermissionIDColumn = postgres.IntegerColumn("permission_id")
		TargetLevelColumn  = postgres.IntegerColumn("target_level")
		GlobalLevelColumn  = postgres.IntegerColumn("global_level")
		CauseColumn        = postgres.StringColumn("cause")
		DateExpireColumn   = postgres.TimestampzColumn("date_expire")
		allColumns         = postgres.ColumnList{UserIDColumn, PermissionIDColumn, TargetLevelColumn, GlobalLevelColumn, CauseColumn, DateExpireColumn}
		mutableColumns     = postgres.ColumnList{TargetLevelColumn, GlobalLevelColumn, CauseColumn, DateExpireColumn}
	)

	return usersPermissionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		PermissionID: PermissionIDColumn,
		TargetLevel:  TargetLevelColumn,
		GlobalLevel:  GlobalLevelColumn,
		Cause:        CauseColumn,
		DateExpire:   DateExpireColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
