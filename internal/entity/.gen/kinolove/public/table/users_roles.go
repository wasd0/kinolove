//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UsersRoles = newUsersRolesTable("public", "users_roles", "")

type usersRolesTable struct {
	postgres.Table

	// Columns
	UserID     postgres.ColumnString
	RoleID     postgres.ColumnInteger
	DateActive postgres.ColumnTimestampz
	DateExpire postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersRolesTable struct {
	usersRolesTable

	EXCLUDED usersRolesTable
}

// AS creates new UsersRolesTable with assigned alias
func (a UsersRolesTable) AS(alias string) *UsersRolesTable {
	return newUsersRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersRolesTable with assigned schema name
func (a UsersRolesTable) FromSchema(schemaName string) *UsersRolesTable {
	return newUsersRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersRolesTable with assigned table prefix
func (a UsersRolesTable) WithPrefix(prefix string) *UsersRolesTable {
	return newUsersRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersRolesTable with assigned table suffix
func (a UsersRolesTable) WithSuffix(suffix string) *UsersRolesTable {
	return newUsersRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersRolesTable(schemaName, tableName, alias string) *UsersRolesTable {
	return &UsersRolesTable{
		usersRolesTable: newUsersRolesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUsersRolesTableImpl("", "excluded", ""),
	}
}

func newUsersRolesTableImpl(schemaName, tableName, alias string) usersRolesTable {
	var (
		UserIDColumn     = postgres.StringColumn("user_id")
		RoleIDColumn     = postgres.IntegerColumn("role_id")
		DateActiveColumn = postgres.TimestampzColumn("date_active")
		DateExpireColumn = postgres.TimestampzColumn("date_expire")
		allColumns       = postgres.ColumnList{UserIDColumn, RoleIDColumn, DateActiveColumn, DateExpireColumn}
		mutableColumns   = postgres.ColumnList{DateActiveColumn, DateExpireColumn}
	)

	return usersRolesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		RoleID:     RoleIDColumn,
		DateActive: DateActiveColumn,
		DateExpire: DateExpireColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
